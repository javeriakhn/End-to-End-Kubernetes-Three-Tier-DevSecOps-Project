name: Build and Deploy backend to ECR

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag for backend'
        required: true
        default: 'latest'
        type: string

jobs:
  build-and-push-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout from Git
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
        
    - name: Docker System Prune
      run: docker system prune -f
      
    - name: Docker Container Prune  
      run: docker container prune -f
      
    - name: Build Docker Image
      run: |
        cd Application-Code/backend
        docker build -t backend:${{ github.event.inputs.tag }} .
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 891377240096.dkr.ecr.us-east-1.amazonaws.com
        
    - name: Tag Docker Image
      run: docker tag frontend:${{ github.event.inputs.tag }} 891377240096.dkr.ecr.us-east-1.amazonaws.com/backend:${{ github.event.inputs.tag }}
        
    - name: Push Docker Image to ECR
      run: docker push 891377240096.dkr.ecr.us-east-1.amazonaws.com/backend:${{ github.event.inputs.tag }}
        
  update-deployment:
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout from Git
      uses: actions/checkout@v3
      
    - name: Configure Git
      run: |
        git config user.email "your-email@example.com"
        git config user.name "your-name"
        
    - name: Attempt Rebase and Handle Conflicts
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: |
        cd Kubernetes-Manifests-file/Frontend
        git fetch origin main
        git rebase origin/main || git rebase --abort

    - name: Update Deployment File if Rebase Succeeded
      if: success() && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: |
        cd Kubernetes-Manifests-file/backend
        imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
        sed -i "s/backend:${imageTag}/backend:${{ github.event.inputs.tag }}/" deployment.yaml
        git add deployment.yaml
        git commit -m "Update deployment Image to version ${{ github.event.inputs.tag }}"
        git push https://${{ secrets.TOKEN }}@github.com/${{ github.repository }} HEAD:main
        
    - name: Cleanup Workspace
      run: |
        git clean -dfx
        git reset --hard








